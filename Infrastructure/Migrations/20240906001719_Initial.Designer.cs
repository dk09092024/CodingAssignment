// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    [Migration("20240906001719_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Domain.Model.General.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Entity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Model.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(13, 2)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TargetAccountId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeRecived")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TargetAccountId")
                        .IsUnique();

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Domain.Model.Account", b =>
                {
                    b.HasBaseType("Domain.Model.General.Entity");

                    b.Property<decimal>("Balance")
                        .HasPrecision(13, 2)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.HasIndex("CustomerId");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Domain.Model.Customer", b =>
                {
                    b.HasBaseType("Domain.Model.General.Entity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Domain.Model.TransactionProtokol", b =>
                {
                    b.HasBaseType("Domain.Model.General.Entity");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("BalanceAfter")
                        .HasPrecision(13, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("BalanceBefore")
                        .HasPrecision(13, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("TimeOfExecution")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("TEXT");

                    b.HasIndex("AccountId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("TransactionProtokoll", (string)null);
                });

            modelBuilder.Entity("Domain.Model.Transaction", b =>
                {
                    b.HasOne("Domain.Model.Account", "TargetAccount")
                        .WithOne()
                        .HasForeignKey("Domain.Model.Transaction", "TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("Domain.Model.Account", b =>
                {
                    b.HasOne("Domain.Model.Customer", "Customer")
                        .WithMany("Accounts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.General.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Model.Account", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Model.Customer", b =>
                {
                    b.HasOne("Domain.Model.General.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Model.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.TransactionProtokol", b =>
                {
                    b.HasOne("Domain.Model.Account", "Account")
                        .WithMany("TransactionHistory")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.General.Entity", null)
                        .WithOne()
                        .HasForeignKey("Domain.Model.TransactionProtokol", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Model.Transaction", "Transaction")
                        .WithOne()
                        .HasForeignKey("Domain.Model.TransactionProtokol", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Domain.Model.Account", b =>
                {
                    b.Navigation("TransactionHistory");
                });

            modelBuilder.Entity("Domain.Model.Customer", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
